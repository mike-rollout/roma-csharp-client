/*
 * Contacts
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = rolloutHubspot.Client.OpenAPIDateConverter;

namespace rolloutHubspot.Model
{
    /// <summary>
    /// BatchResponseSimplePublicObjectWithErrors
    /// </summary>
    [DataContract(Name = "BatchResponseSimplePublicObjectWithErrors")]
    public partial class BatchResponseSimplePublicObjectWithErrors : IValidatableObject
    {
        /// <summary>
        /// Defines Status
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            /// <summary>
            /// Enum PENDING for value: PENDING
            /// </summary>
            [EnumMember(Value = "PENDING")]
            PENDING = 1,

            /// <summary>
            /// Enum PROCESSING for value: PROCESSING
            /// </summary>
            [EnumMember(Value = "PROCESSING")]
            PROCESSING = 2,

            /// <summary>
            /// Enum CANCELED for value: CANCELED
            /// </summary>
            [EnumMember(Value = "CANCELED")]
            CANCELED = 3,

            /// <summary>
            /// Enum COMPLETE for value: COMPLETE
            /// </summary>
            [EnumMember(Value = "COMPLETE")]
            COMPLETE = 4
        }


        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name = "status", IsRequired = true, EmitDefaultValue = true)]
        public StatusEnum Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="BatchResponseSimplePublicObjectWithErrors" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected BatchResponseSimplePublicObjectWithErrors() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="BatchResponseSimplePublicObjectWithErrors" /> class.
        /// </summary>
        /// <param name="completedAt">completedAt (required).</param>
        /// <param name="numErrors">numErrors.</param>
        /// <param name="requestedAt">requestedAt.</param>
        /// <param name="startedAt">startedAt (required).</param>
        /// <param name="links">links.</param>
        /// <param name="results">results (required).</param>
        /// <param name="errors">errors.</param>
        /// <param name="status">status (required).</param>
        public BatchResponseSimplePublicObjectWithErrors(DateTime completedAt = default(DateTime), int numErrors = default(int), DateTime requestedAt = default(DateTime), DateTime startedAt = default(DateTime), Dictionary<string, string> links = default(Dictionary<string, string>), List<SimplePublicObject> results = default(List<SimplePublicObject>), List<StandardError> errors = default(List<StandardError>), StatusEnum status = default(StatusEnum))
        {
            this.CompletedAt = completedAt;
            this.StartedAt = startedAt;
            // to ensure "results" is required (not null)
            if (results == null)
            {
                throw new ArgumentNullException("results is a required property for BatchResponseSimplePublicObjectWithErrors and cannot be null");
            }
            this.Results = results;
            this.Status = status;
            this.NumErrors = numErrors;
            this.RequestedAt = requestedAt;
            this.Links = links;
            this.Errors = errors;
        }

        /// <summary>
        /// Gets or Sets CompletedAt
        /// </summary>
        [DataMember(Name = "completedAt", IsRequired = true, EmitDefaultValue = true)]
        public DateTime CompletedAt { get; set; }

        /// <summary>
        /// Gets or Sets NumErrors
        /// </summary>
        [DataMember(Name = "numErrors", EmitDefaultValue = false)]
        public int NumErrors { get; set; }

        /// <summary>
        /// Gets or Sets RequestedAt
        /// </summary>
        [DataMember(Name = "requestedAt", EmitDefaultValue = false)]
        public DateTime RequestedAt { get; set; }

        /// <summary>
        /// Gets or Sets StartedAt
        /// </summary>
        [DataMember(Name = "startedAt", IsRequired = true, EmitDefaultValue = true)]
        public DateTime StartedAt { get; set; }

        /// <summary>
        /// Gets or Sets Links
        /// </summary>
        [DataMember(Name = "links", EmitDefaultValue = false)]
        public Dictionary<string, string> Links { get; set; }

        /// <summary>
        /// Gets or Sets Results
        /// </summary>
        [DataMember(Name = "results", IsRequired = true, EmitDefaultValue = true)]
        public List<SimplePublicObject> Results { get; set; }

        /// <summary>
        /// Gets or Sets Errors
        /// </summary>
        [DataMember(Name = "errors", EmitDefaultValue = false)]
        public List<StandardError> Errors { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class BatchResponseSimplePublicObjectWithErrors {\n");
            sb.Append("  CompletedAt: ").Append(CompletedAt).Append("\n");
            sb.Append("  NumErrors: ").Append(NumErrors).Append("\n");
            sb.Append("  RequestedAt: ").Append(RequestedAt).Append("\n");
            sb.Append("  StartedAt: ").Append(StartedAt).Append("\n");
            sb.Append("  Links: ").Append(Links).Append("\n");
            sb.Append("  Results: ").Append(Results).Append("\n");
            sb.Append("  Errors: ").Append(Errors).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
