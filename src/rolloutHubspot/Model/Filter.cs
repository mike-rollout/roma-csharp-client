/*
 * Contacts
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = rolloutHubspot.Client.OpenAPIDateConverter;

namespace rolloutHubspot.Model
{
    /// <summary>
    /// Filter
    /// </summary>
    [DataContract(Name = "Filter")]
    public partial class Filter : IValidatableObject
    {
        /// <summary>
        /// null
        /// </summary>
        /// <value>null</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum OperatorEnum
        {
            /// <summary>
            /// Enum EQ for value: EQ
            /// </summary>
            [EnumMember(Value = "EQ")]
            EQ = 1,

            /// <summary>
            /// Enum NEQ for value: NEQ
            /// </summary>
            [EnumMember(Value = "NEQ")]
            NEQ = 2,

            /// <summary>
            /// Enum LT for value: LT
            /// </summary>
            [EnumMember(Value = "LT")]
            LT = 3,

            /// <summary>
            /// Enum LTE for value: LTE
            /// </summary>
            [EnumMember(Value = "LTE")]
            LTE = 4,

            /// <summary>
            /// Enum GT for value: GT
            /// </summary>
            [EnumMember(Value = "GT")]
            GT = 5,

            /// <summary>
            /// Enum GTE for value: GTE
            /// </summary>
            [EnumMember(Value = "GTE")]
            GTE = 6,

            /// <summary>
            /// Enum BETWEEN for value: BETWEEN
            /// </summary>
            [EnumMember(Value = "BETWEEN")]
            BETWEEN = 7,

            /// <summary>
            /// Enum IN for value: IN
            /// </summary>
            [EnumMember(Value = "IN")]
            IN = 8,

            /// <summary>
            /// Enum NOTIN for value: NOT_IN
            /// </summary>
            [EnumMember(Value = "NOT_IN")]
            NOTIN = 9,

            /// <summary>
            /// Enum HASPROPERTY for value: HAS_PROPERTY
            /// </summary>
            [EnumMember(Value = "HAS_PROPERTY")]
            HASPROPERTY = 10,

            /// <summary>
            /// Enum NOTHASPROPERTY for value: NOT_HAS_PROPERTY
            /// </summary>
            [EnumMember(Value = "NOT_HAS_PROPERTY")]
            NOTHASPROPERTY = 11,

            /// <summary>
            /// Enum CONTAINSTOKEN for value: CONTAINS_TOKEN
            /// </summary>
            [EnumMember(Value = "CONTAINS_TOKEN")]
            CONTAINSTOKEN = 12,

            /// <summary>
            /// Enum NOTCONTAINSTOKEN for value: NOT_CONTAINS_TOKEN
            /// </summary>
            [EnumMember(Value = "NOT_CONTAINS_TOKEN")]
            NOTCONTAINSTOKEN = 13
        }


        /// <summary>
        /// null
        /// </summary>
        /// <value>null</value>
        [DataMember(Name = "operator", IsRequired = true, EmitDefaultValue = true)]
        public OperatorEnum Operator { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Filter" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Filter() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Filter" /> class.
        /// </summary>
        /// <param name="highValue">highValue.</param>
        /// <param name="propertyName">propertyName (required).</param>
        /// <param name="values">values.</param>
        /// <param name="value">value.</param>
        /// <param name="varOperator">null (required).</param>
        public Filter(string highValue = default(string), string propertyName = default(string), List<string> values = default(List<string>), string value = default(string), OperatorEnum varOperator = default(OperatorEnum))
        {
            // to ensure "propertyName" is required (not null)
            if (propertyName == null)
            {
                throw new ArgumentNullException("propertyName is a required property for Filter and cannot be null");
            }
            this.PropertyName = propertyName;
            this.Operator = varOperator;
            this.HighValue = highValue;
            this.Values = values;
            this.Value = value;
        }

        /// <summary>
        /// Gets or Sets HighValue
        /// </summary>
        [DataMember(Name = "highValue", EmitDefaultValue = false)]
        public string HighValue { get; set; }

        /// <summary>
        /// Gets or Sets PropertyName
        /// </summary>
        [DataMember(Name = "propertyName", IsRequired = true, EmitDefaultValue = true)]
        public string PropertyName { get; set; }

        /// <summary>
        /// Gets or Sets Values
        /// </summary>
        [DataMember(Name = "values", EmitDefaultValue = false)]
        public List<string> Values { get; set; }

        /// <summary>
        /// Gets or Sets Value
        /// </summary>
        [DataMember(Name = "value", EmitDefaultValue = false)]
        public string Value { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Filter {\n");
            sb.Append("  HighValue: ").Append(HighValue).Append("\n");
            sb.Append("  PropertyName: ").Append(PropertyName).Append("\n");
            sb.Append("  Values: ").Append(Values).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  Operator: ").Append(Operator).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
