/*
 * Contacts
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = rolloutHubspot.Client.OpenAPIDateConverter;

namespace rolloutHubspot.Model
{
    /// <summary>
    /// SimplePublicObjectInputForCreate
    /// </summary>
    [DataContract(Name = "SimplePublicObjectInputForCreate")]
    public partial class SimplePublicObjectInputForCreate : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SimplePublicObjectInputForCreate" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SimplePublicObjectInputForCreate() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SimplePublicObjectInputForCreate" /> class.
        /// </summary>
        /// <param name="associations">associations (required).</param>
        /// <param name="properties">properties (required).</param>
        public SimplePublicObjectInputForCreate(List<PublicAssociationsForObject> associations = default(List<PublicAssociationsForObject>), Dictionary<string, string> properties = default(Dictionary<string, string>))
        {
            // to ensure "associations" is required (not null)
            if (associations == null)
            {
                throw new ArgumentNullException("associations is a required property for SimplePublicObjectInputForCreate and cannot be null");
            }
            this.Associations = associations;
            // to ensure "properties" is required (not null)
            if (properties == null)
            {
                throw new ArgumentNullException("properties is a required property for SimplePublicObjectInputForCreate and cannot be null");
            }
            this.Properties = properties;
        }

        /// <summary>
        /// Gets or Sets Associations
        /// </summary>
        [DataMember(Name = "associations", IsRequired = true, EmitDefaultValue = true)]
        public List<PublicAssociationsForObject> Associations { get; set; }

        /// <summary>
        /// Gets or Sets Properties
        /// </summary>
        /// <example>{&quot;email&quot;:&quot;bcooper@biglytics.net&quot;,&quot;phone&quot;:&quot;(877) 929-0687&quot;,&quot;company&quot;:&quot;Biglytics&quot;,&quot;website&quot;:&quot;biglytics.net&quot;,&quot;lastname&quot;:&quot;Cooper&quot;,&quot;firstname&quot;:&quot;Bryan&quot;}</example>
        [DataMember(Name = "properties", IsRequired = true, EmitDefaultValue = true)]
        public Dictionary<string, string> Properties { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SimplePublicObjectInputForCreate {\n");
            sb.Append("  Associations: ").Append(Associations).Append("\n");
            sb.Append("  Properties: ").Append(Properties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
