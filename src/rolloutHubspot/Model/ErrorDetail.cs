/*
 * Contacts
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = rolloutHubspot.Client.OpenAPIDateConverter;

namespace rolloutHubspot.Model
{
    /// <summary>
    /// ErrorDetail
    /// </summary>
    [DataContract(Name = "ErrorDetail")]
    public partial class ErrorDetail : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ErrorDetail" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ErrorDetail() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ErrorDetail" /> class.
        /// </summary>
        /// <param name="subCategory">A specific category that contains more specific detail about the error.</param>
        /// <param name="code">The status code associated with the error detail.</param>
        /// <param name="varIn">The name of the field or parameter in which the error was found..</param>
        /// <param name="context">Context about the error condition.</param>
        /// <param name="message">A human readable message describing the error along with remediation steps where appropriate (required).</param>
        public ErrorDetail(string subCategory = default(string), string code = default(string), string varIn = default(string), Dictionary<string, List<string>> context = default(Dictionary<string, List<string>>), string message = default(string))
        {
            // to ensure "message" is required (not null)
            if (message == null)
            {
                throw new ArgumentNullException("message is a required property for ErrorDetail and cannot be null");
            }
            this.Message = message;
            this.SubCategory = subCategory;
            this.Code = code;
            this.In = varIn;
            this.Context = context;
        }

        /// <summary>
        /// A specific category that contains more specific detail about the error
        /// </summary>
        /// <value>A specific category that contains more specific detail about the error</value>
        [DataMember(Name = "subCategory", EmitDefaultValue = false)]
        public string SubCategory { get; set; }

        /// <summary>
        /// The status code associated with the error detail
        /// </summary>
        /// <value>The status code associated with the error detail</value>
        [DataMember(Name = "code", EmitDefaultValue = false)]
        public string Code { get; set; }

        /// <summary>
        /// The name of the field or parameter in which the error was found.
        /// </summary>
        /// <value>The name of the field or parameter in which the error was found.</value>
        [DataMember(Name = "in", EmitDefaultValue = false)]
        public string In { get; set; }

        /// <summary>
        /// Context about the error condition
        /// </summary>
        /// <value>Context about the error condition</value>
        /// <example>{&quot;missingScopes&quot;:[&quot;scope1&quot;,&quot;scope2&quot;]}</example>
        [DataMember(Name = "context", EmitDefaultValue = false)]
        public Dictionary<string, List<string>> Context { get; set; }

        /// <summary>
        /// A human readable message describing the error along with remediation steps where appropriate
        /// </summary>
        /// <value>A human readable message describing the error along with remediation steps where appropriate</value>
        [DataMember(Name = "message", IsRequired = true, EmitDefaultValue = true)]
        public string Message { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ErrorDetail {\n");
            sb.Append("  SubCategory: ").Append(SubCategory).Append("\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  In: ").Append(In).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
